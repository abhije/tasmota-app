// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/device.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4686249421003294770),
      name: 'Device',
      lastPropertyId: const IdUid(11, 2679648383958333373),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5469736678689001816),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8575397876593328972),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7476741010983889841),
            name: 'ip',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3126022383928675652),
            name: 'deviceId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2380784346679591295),
            name: 'isFav',
            type: 1,
            flags: 8,
            indexId: const IdUid(2, 7544088089709512952)),
        ModelProperty(
            id: const IdUid(8, 2493193168682882683),
            name: 'apiPasswd',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2679648383958333373),
            name: 'deviceTypeIndex',
            type: 6,
            flags: 8,
            indexId: const IdUid(5, 4459625273426908961))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2563953170968413169),
      lastIndexId: const IdUid(5, 4459625273426908961),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2563953170968413169],
      retiredIndexUids: const [
        1289023305634859685,
        7628038076052927852,
        8756067802674641257
      ],
      retiredPropertyUids: const [
        4157001979201992318,
        5824011456686778122,
        4723652235041585012,
        2777064034787374964,
        7911047485150845051,
        4797368110400813299,
        6866555491074461014
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Device: EntityDefinition<Device>(
        model: _entities[0],
        toOneRelations: (Device object) => [],
        toManyRelations: (Device object) => {},
        getId: (Device object) => object.id,
        setId: (Device object, int id) {
          object.id = id;
        },
        objectToFB: (Device object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final ipOffset = fbb.writeString(object.ip);
          final apiPasswdOffset = object.apiPasswd == null
              ? null
              : fbb.writeString(object.apiPasswd!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, ipOffset);
          fbb.addInt64(3, object.deviceId);
          fbb.addBool(6, object.isFav);
          fbb.addOffset(7, apiPasswdOffset);
          fbb.addInt64(10, object.deviceTypeIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Device(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ip: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              deviceId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              apiPasswd: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              deviceTypeIndex:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              isFav: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Device] entity fields to define ObjectBox queries.
class Device_ {
  /// see [Device.id]
  static final id = QueryIntegerProperty<Device>(_entities[0].properties[0]);

  /// see [Device.name]
  static final name = QueryStringProperty<Device>(_entities[0].properties[1]);

  /// see [Device.ip]
  static final ip = QueryStringProperty<Device>(_entities[0].properties[2]);

  /// see [Device.deviceId]
  static final deviceId =
      QueryIntegerProperty<Device>(_entities[0].properties[3]);

  /// see [Device.isFav]
  static final isFav = QueryBooleanProperty<Device>(_entities[0].properties[4]);

  /// see [Device.apiPasswd]
  static final apiPasswd =
      QueryStringProperty<Device>(_entities[0].properties[5]);

  /// see [Device.deviceTypeIndex]
  static final deviceTypeIndex =
      QueryIntegerProperty<Device>(_entities[0].properties[6]);
}
